set args ./input.txt
break explode_bomb
break phase_4
break phase_5
break phase_6


0x0000000000400f5b <+0>:	sub    $0x18,%rsp
   0x0000000000400f5f <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000400f64 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000400f69 <+14>:	mov    $0x40278d,%esi
   0x0000000000400f6e <+19>:	mov    $0x0,%eax
=> 0x0000000000400f73 <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000400f78 <+29>:	cmp    $0x1,%eax    //sscanf返回读入的数字个数
   0x0000000000400f7b <+32>:	jg     0x400f82 <phase_3+39>
   0x0000000000400f7d <+34>:	callq  0x401544 <explode_bomb>
   0x0000000000400f82 <+39>:	cmpl   $0x7,0xc(%rsp) //存的是第一个数字
   0x0000000000400f87 <+44>:	ja     0x400fc5 <phase_3+106>
   0x0000000000400f89 <+46>:	mov    0xc(%rsp),%eax //注意16进制
   0x0000000000400f8d <+50>:	jmpq   *0x4024f0(,%rax,8)
   0x0000000000400f94 <+57>:	mov    $0x277,%eax
   0x0000000000400f99 <+62>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400f9b <+64>:	mov    $0x2d5,%eax
   0x0000000000400fa0 <+69>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fa2 <+71>:	mov    $0x62,%eax
   0x0000000000400fa7 <+76>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fa9 <+78>:	mov    $0x137,%eax
   0x0000000000400fae <+83>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fb0 <+85>:	mov    $0x1d6,%eax
   0x0000000000400fb5 <+90>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fb7 <+92>:	mov    $0x2ca,%eax
   0x0000000000400fbc <+97>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fbe <+99>:	mov    $0x383,%eax
   0x0000000000400fc3 <+104>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fc5 <+106>:	callq  0x401544 <explode_bomb>
   0x0000000000400fca <+111>:	mov    $0x0,%eax
   0x0000000000400fcf <+116>:	jmp    0x400fd6 <phase_3+123>
   0x0000000000400fd1 <+118>:	mov    $0x14f,%eax
   0x0000000000400fd6 <+123>:	cmp    0x8(%rsp),%eax
   0x0000000000400fda <+127>:	je     0x400fe1 <phase_3+134>
   0x0000000000400fdc <+129>:	callq  0x401544 <explode_bomb>
   0x0000000000400fe1 <+134>:	add    $0x18,%rsp
   0x0000000000400fe5 <+138>:	retq   


对应关系
(gdb) x/64xb 0x4024f0
0x4024f0:	0x94	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x4024f8:	0xd1	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402500:	0x9b	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402508:	0xa2	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402510:	0xa9	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402518:	0xb0	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402520:	0xb7	0x0f	0x40	0x00	0x00	0x00	0x00	0x00
0x402528:	0xbe	0x0f	0x40	0x00	0x00	0x00	0x00	0x00

0 -> 0x400f94 ->0x277 ->631
1 -> 0x400fd1 ->0x14f ->335
2 -> 0x400f9b ->0x2d5 ->725
3 -> 0x400fa2 ->0x62  ->98
4 -> 0x400fa9 ->0x137 ->311
5 -> 0x400fb0 ->0x1d6 ->470
6 -> 0x400fb7 ->0x2ca ->714
7 -> 0x400fbe ->0x383 ->899


Dump of assembler code for function phase_4:
=> 0x0000000000401019 <+0>:	sub    $0x18,%rsp
   0x000000000040101d <+4>:	lea    0x8(%rsp),%rcx
   0x0000000000401022 <+9>:	lea    0xc(%rsp),%rdx
   0x0000000000401027 <+14>:	mov    $0x40278d,%esi
   0x000000000040102c <+19>:	mov    $0x0,%eax
   0x0000000000401031 <+24>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x0000000000401036 <+29>:	cmp    $0x2,%eax   //$eax 中存放着读入的数字个数
   0x0000000000401039 <+32>:	jne    0x401042 <phase_4+41>
   0x000000000040103b <+34>:	cmpl   $0xe,0xc(%rsp)  //First input number below equal 0xe
   0x0000000000401040 <+39>:	jbe    0x401047 <phase_4+46>
   0x0000000000401042 <+41>:	callq  0x401544 <explode_bomb>
   0x0000000000401047 <+46>:	mov    $0xe,%edx //Third parameter
   0x000000000040104c <+51>:	mov    $0x0,%esi //Second parameter
   0x0000000000401051 <+56>:	mov    0xc(%rsp),%edi //First parameter
   0x0000000000401055 <+60>:	callq  0x400fe6 <func4>
   0x000000000040105a <+65>:	cmp    $0x12,%eax
   0x000000000040105d <+68>:	jne    0x401066 <phase_4+77>
   0x000000000040105f <+70>:	cmpl   $0x12,0x8(%rsp)
   0x0000000000401064 <+75>:	je     0x40106b <phase_4+82>
   0x0000000000401066 <+77>:	callq  0x401544 <explode_bomb>
   0x000000000040106b <+82>:	add    $0x18,%rsp
   0x000000000040106f <+86>:	retq   
End of assembler dump.


First number -> 0x7fffffffe14c == 0xc(%rsp)
Second number -> 0x7fffffffe148 == 0x8(%rsp)


$0xe,%edx //Third parameter
$0x0,%esi //Second parameter
0xc(%rsp),%edi //First parameter

Dump of assembler code for function func4:
=> 0x0000000000400fe6 <+0>:	push   %rbx
   0x0000000000400fe7 <+1>:	mov    %edx,%eax
   0x0000000000400fe9 <+3>:	sub    %esi,%eax
   0x0000000000400feb <+5>:	mov    %eax,%ebx
   0x0000000000400fed <+7>:	shr    $0x1f,%ebx
   0x0000000000400ff0 <+10>:	add    %ebx,%eax
   0x0000000000400ff2 <+12>:	sar    %eax
   0x0000000000400ff4 <+14>:	lea    (%rax,%rsi,1),%ebx
   0x0000000000400ff7 <+17>:	cmp    %edi,%ebx
   0x0000000000400ff9 <+19>:	jle    0x401007 <func4+33>
   0x0000000000400ffb <+21>:	lea    -0x1(%rbx),%edx
   0x0000000000400ffe <+24>:	callq  0x400fe6 <func4>
   0x0000000000401003 <+29>:	add    %ebx,%eax
   0x0000000000401005 <+31>:	jmp    0x401017 <func4+49>
   0x0000000000401007 <+33>:	mov    %ebx,%eax
   0x0000000000401009 <+35>:	cmp    %edi,%ebx
   0x000000000040100b <+37>:	jge    0x401017 <func4+49>
   0x000000000040100d <+39>:	lea    0x1(%rbx),%esi
   0x0000000000401010 <+42>:	callq  0x400fe6 <func4>
   0x0000000000401015 <+47>:	add    %ebx,%eax
   0x0000000000401017 <+49>:	pop    %rbx
   0x0000000000401018 <+50>:	retq   
End of assembler dump.

18 187


1 eax :11
2 eax :13
3 eax :10
4 eax :13
5 eax :15
6 eax :21
7 eax :7
8 eax :35
9 eax :27
10 eax :37
11 eax :18
12 eax :38
13 eax :41
14 eax :45


Dump of assembler code for function phase_5:
   0x0000000000401070 <+0>:	push   %rbx
   0x0000000000401071 <+1>:	sub    $0x10,%rsp
   0x0000000000401075 <+5>:	mov    %rdi,%rbx
   0x0000000000401078 <+8>:	callq  0x4012c1 <string_length>
   0x000000000040107d <+13>:	cmp    $0x6,%eax
   0x0000000000401080 <+16>:	je     0x4010c2 <phase_5+82>
   0x0000000000401082 <+18>:	callq  0x401544 <explode_bomb>
   0x0000000000401087 <+23>:	jmp    0x4010c2 <phase_5+82>
   0x0000000000401089 <+25>:	movzbl (%rbx,%rax,1),%edx
   0x000000000040108d <+29>:	and    $0xf,%edx
   0x0000000000401090 <+32>:	movzbl 0x402530(%rdx),%edx
   0x0000000000401097 <+39>:	mov    %dl,(%rsp,%rax,1)
   0x000000000040109a <+42>:	add    $0x1,%rax
   0x000000000040109e <+46>:	cmp    $0x6,%rax
   0x00000000004010a2 <+50>:	jne    0x401089 <phase_5+25>
   0x00000000004010a4 <+52>:	movb   $0x0,0x6(%rsp)
   0x00000000004010a9 <+57>:	mov    $0x4024e6,%esi
   0x00000000004010ae <+62>:	mov    %rsp,%rdi
   0x00000000004010b1 <+65>:	callq  0x4012de <strings_not_equal>
   0x00000000004010b6 <+70>:	test   %eax,%eax
   0x00000000004010b8 <+72>:	je     0x4010c9 <phase_5+89>
   0x00000000004010ba <+74>:	callq  0x401544 <explode_bomb>
   0x00000000004010bf <+79>:	nop
   0x00000000004010c0 <+80>:	jmp    0x4010c9 <phase_5+89>
   0x00000000004010c2 <+82>:	mov    $0x0,%eax
   0x00000000004010c7 <+87>:	jmp    0x401089 <phase_5+25>
   0x00000000004010c9 <+89>:	add    $0x10,%rsp
   0x00000000004010cd <+93>:	pop    %rbx
   0x00000000004010ce <+94>:	retq   
End of assembler dump.


madui ersnf otvbylSo you think you can stop the bomb with ctrl-c, do you?

x /s 0x4024e6
devils
25d4f7
abcde fghij klmno p
beldog  <-=answer
madui ersnf otvby l



Dump of assembler code for function phase_6:
=> 0x00000000004010cf <+0>:	push   %r13
   0x00000000004010d1 <+2>:	push   %r12
   0x00000000004010d3 <+4>:	push   %rbp
   0x00000000004010d4 <+5>:	push   %rbx
   0x00000000004010d5 <+6>:	sub    $0x58,%rsp
   0x00000000004010d9 <+10>:	lea    0x30(%rsp),%rsi
   0x00000000004010de <+15>:	callq  0x40157a <read_six_numbers>
   0x00000000004010e3 <+20>:	lea    0x30(%rsp),%r13
   0x00000000004010e8 <+25>:	mov    $0x0,%r12d
   0x00000000004010ee <+31>:	mov    %r13,%rbp
   0x00000000004010f1 <+34>:	mov    0x0(%r13),%eax
   0x00000000004010f5 <+38>:	sub    $0x1,%eax
   0x00000000004010f8 <+41>:	cmp    $0x5,%eax
   0x00000000004010fb <+44>:	jbe    0x401102 <phase_6+51>
   0x00000000004010fd <+46>:	callq  0x401544 <explode_bomb>
   0x0000000000401102 <+51>:	add    $0x1,%r12d
   0x0000000000401106 <+55>:	cmp    $0x6,%r12d
   0x000000000040110a <+59>:	jne    0x401113 <phase_6+68>
   0x000000000040110c <+61>:	mov    $0x0,%esi
   0x0000000000401111 <+66>:	jmp    0x401155 <phase_6+134>
   0x0000000000401113 <+68>:	mov    %r12d,%ebx
   0x0000000000401116 <+71>:	movslq %ebx,%rax
   0x0000000000401119 <+74>:	mov    0x30(%rsp,%rax,4),%eax
   0x000000000040111d <+78>:	cmp    %eax,0x0(%rbp)
   0x0000000000401120 <+81>:	jne    0x401127 <phase_6+88>
   0x0000000000401122 <+83>:	callq  0x401544 <explode_bomb>
   0x0000000000401127 <+88>:	add    $0x1,%ebx
   0x000000000040112a <+91>:	cmp    $0x5,%ebx
   0x000000000040112d <+94>:	jle    0x401116 <phase_6+71>
   0x000000000040112f <+96>:	add    $0x4,%r13
   0x0000000000401133 <+100>:	jmp    0x4010ee <phase_6+31>
   0x0000000000401135 <+102>:	mov    0x8(%rdx),%rdx
   0x0000000000401139 <+106>:	add    $0x1,%eax
   0x000000000040113c <+109>:	cmp    %ecx,%eax
   0x000000000040113e <+111>:	jne    0x401135 <phase_6+102>
   0x0000000000401140 <+113>:	jmp    0x401147 <phase_6+120>
   0x0000000000401142 <+115>:	mov    $0x6042f0,%edx
   0x0000000000401147 <+120>:	mov    %rdx,(%rsp,%rsi,2)
   0x000000000040114b <+124>:	add    $0x4,%rsi
   0x000000000040114f <+128>:	cmp    $0x18,%rsi
   0x0000000000401153 <+132>:	je     0x40116a <phase_6+155>
   0x0000000000401155 <+134>:	mov    0x30(%rsp,%rsi,1),%ecx
   0x0000000000401159 <+138>:	cmp    $0x1,%ecx
   0x000000000040115c <+141>:	jle    0x401142 <phase_6+115>
   0x000000000040115e <+143>:	mov    $0x1,%eax
   0x0000000000401163 <+148>:	mov    $0x6042f0,%edx
   0x0000000000401168 <+153>:	jmp    0x401135 <phase_6+102>
   0x000000000040116a <+155>:	mov    (%rsp),%rbx
   0x000000000040116e <+159>:	lea    0x8(%rsp),%rax
   0x0000000000401173 <+164>:	lea    0x30(%rsp),%rsi
   0x0000000000401178 <+169>:	mov    %rbx,%rcx
   0x000000000040117b <+172>:	mov    (%rax),%rdx
   0x000000000040117e <+175>:	mov    %rdx,0x8(%rcx)
   0x0000000000401182 <+179>:	add    $0x8,%rax
   0x0000000000401186 <+183>:	cmp    %rsi,%rax
   0x0000000000401189 <+186>:	je     0x401190 <phase_6+193>
   0x000000000040118b <+188>:	mov    %rdx,%rcx
   0x000000000040118e <+191>:	jmp    0x40117b <phase_6+172>
   0x0000000000401190 <+193>:	movq   $0x0,0x8(%rdx)
   0x0000000000401198 <+201>:	mov    $0x5,%ebp
   0x000000000040119d <+206>:	mov    0x8(%rbx),%rax
   0x00000000004011a1 <+210>:	mov    (%rax),%eax
   0x00000000004011a3 <+212>:	cmp    %eax,(%rbx)
   0x00000000004011a5 <+214>:	jle    0x4011ac <phase_6+221> //从小到大
   0x00000000004011a7 <+216>:	callq  0x401544 <explode_bomb>
   0x00000000004011ac <+221>:	mov    0x8(%rbx),%rbx
   0x00000000004011b0 <+225>:	sub    $0x1,%ebp
   0x00000000004011b3 <+228>:	jne    0x40119d <phase_6+206>
   0x00000000004011b5 <+230>:	add    $0x58,%rsp
   0x00000000004011b9 <+234>:	pop    %rbx
   0x00000000004011ba <+235>:	pop    %rbp
   0x00000000004011bb <+236>:	pop    %r12
   0x00000000004011bd <+238>:	pop    %r13
   0x00000000004011bf <+240>:	retq   
End of assembler dump.


0x6042f0 <node1>:	715	1	6308608	0
0x604300 <node2>:	67	2	6308624	0
0x604310 <node3>:	549	3	6308640	0
0x604320 <node4>:	535	4	6308656	0
0x604330 <node5>:	168	5	6308672	0
0x604340 <node6>:	488	6	0	0
From small to great
1 3 4 6 5 2
2 5 6 4 3 1


Dump of assembler code for function phase_defused:
   0x00000000004016e2 <+0>:	sub    $0x68,%rsp
   0x00000000004016e6 <+4>:	mov    $0x1,%edi
   0x00000000004016eb <+9>:	callq  0x401480 <send_msg>
   0x00000000004016f0 <+14>:	cmpl   $0x6,0x2030a5(%rip)        # 0x60479c <num_input_strings>
   0x00000000004016f7 <+21>:	jne    0x401766 <phase_defused+132>
   0x00000000004016f9 <+23>:	lea    0x10(%rsp),%r8
   0x00000000004016fe <+28>:	lea    0x8(%rsp),%rcx
   0x0000000000401703 <+33>:	lea    0xc(%rsp),%rdx
   0x0000000000401708 <+38>:	mov    $0x4027d7,%esi
   0x000000000040170d <+43>:	mov    $0x6048b0,%edi
   0x0000000000401712 <+48>:	mov    $0x0,%eax
   0x0000000000401717 <+53>:	callq  0x400c30 <__isoc99_sscanf@plt>
   0x000000000040171c <+58>:	cmp    $0x3,%eax
   0x000000000040171f <+61>:	jne    0x401752 <phase_defused+112>
   0x0000000000401721 <+63>:	mov    $0x4027e0,%esi
   0x0000000000401726 <+68>:	lea    0x10(%rsp),%rdi
   0x000000000040172b <+73>:	callq  0x4012de <strings_not_equal>
   0x0000000000401730 <+78>:	test   %eax,%eax
   0x0000000000401732 <+80>:	jne    0x401752 <phase_defused+112>
   0x0000000000401734 <+82>:	mov    $0x402638,%edi
   0x0000000000401739 <+87>:	callq  0x400b40 <puts@plt>
   0x000000000040173e <+92>:	mov    $0x402660,%edi
   0x0000000000401743 <+97>:	callq  0x400b40 <puts@plt>
   0x0000000000401748 <+102>:	mov    $0x0,%eax
   0x000000000040174d <+107>:	callq  0x4011fe <secret_phase>
   0x0000000000401752 <+112>:	mov    $0x402698,%edi
   0x0000000000401757 <+117>:	callq  0x400b40 <puts@plt>
   0x000000000040175c <+122>:	mov    $0x4026c8,%edi
   0x0000000000401761 <+127>:	callq  0x400b40 <puts@plt>
   0x0000000000401766 <+132>:	add    $0x68,%rsp
   0x000000000040176a <+136>:	retq   
End of assembler dump.

(gdb) x/s 0x402698
0x402698:	"Congratulations! You've defused the bomb!"
(gdb) x/s 0x4026c8
0x4026c8:	"Your instructor has been notified and will verify your solution."
(gdb) x/s 0x402660
0x402660:	"But finding it and solving it are quite different..."
(gdb) x/s 0x402638
0x402638:	"Curses, you've found the secret phase!"
(gdb) x/s 0x4027e0
0x4027e0:	"DrEvil"
(gdb) x/s 0x6048b0
0x6048b0 <input_strings+240>:	"11 18"
(gdb) x/s 0x4027d7
0x4027d7:	"%d %d %s"

Dump of assembler code for function secret_phase:
=> 0x00000000004011fe <+0>:	push   %rbx
   0x00000000004011ff <+1>:	callq  0x4015bc <read_line>
   0x0000000000401204 <+6>:	mov    $0xa,%edx
   0x0000000000401209 <+11>:	mov    $0x0,%esi
   0x000000000040120e <+16>:	mov    %rax,%rdi
   0x0000000000401211 <+19>:	callq  0x400c00 <strtol@plt>
   0x0000000000401216 <+24>:	mov    %rax,%rbx
   0x0000000000401219 <+27>:	lea    -0x1(%rax),%eax
   0x000000000040121c <+30>:	cmp    $0x3e8,%eax
   0x0000000000401221 <+35>:	jbe    0x401228 <secret_phase+42>
   0x0000000000401223 <+37>:	callq  0x401544 <explode_bomb>
   0x0000000000401228 <+42>:	mov    %ebx,%esi
   0x000000000040122a <+44>:	mov    $0x604110,%edi
   0x000000000040122f <+49>:	callq  0x4011c0 <fun7>
   0x0000000000401234 <+54>:	cmp    $0x7,%eax
   0x0000000000401237 <+57>:	je     0x40123e <secret_phase+64>
   0x0000000000401239 <+59>:	callq  0x401544 <explode_bomb>
   0x000000000040123e <+64>:	mov    $0x4024c0,%edi
   0x0000000000401243 <+69>:	callq  0x400b40 <puts@plt>
   0x0000000000401248 <+74>:	callq  0x4016e2 <phase_defused>
   0x000000000040124d <+79>:	pop    %rbx
   0x000000000040124e <+80>:	retq   
End of assembler dump.


Dump of assembler code for function fun7:
   0x00000000004011c0 <+0>:	sub    $0x8,%rsp
   0x00000000004011c4 <+4>:	test   %rdi,%rdi
   0x00000000004011c7 <+7>:	je     0x4011f4 <fun7+52>
   0x00000000004011c9 <+9>:	mov    (%rdi),%edx
   0x00000000004011cb <+11>:	cmp    %esi,%edx
   0x00000000004011cd <+13>:	jle    0x4011dc <fun7+28>
   0x00000000004011cf <+15>:	mov    0x8(%rdi),%rdi
   0x00000000004011d3 <+19>:	callq  0x4011c0 <fun7>
   0x00000000004011d8 <+24>:	add    %eax,%eax
   0x00000000004011da <+26>:	jmp    0x4011f9 <fun7+57>
   0x00000000004011dc <+28>:	mov    $0x0,%eax
   0x00000000004011e1 <+33>:	cmp    %esi,%edx
   0x00000000004011e3 <+35>:	je     0x4011f9 <fun7+57>
   0x00000000004011e5 <+37>:	mov    0x10(%rdi),%rdi
   0x00000000004011e9 <+41>:	callq  0x4011c0 <fun7>
   0x00000000004011ee <+46>:	lea    0x1(%rax,%rax,1),%eax
   0x00000000004011f2 <+50>:	jmp    0x4011f9 <fun7+57>
   0x00000000004011f4 <+52>:	mov    $0xffffffff,%eax
   0x00000000004011f9 <+57>:	add    $0x8,%rsp
   0x00000000004011fd <+61>:	retq   
End of assembler dump.


0x604110 <n1>:	36	0	6308144	0
0x604120 <n1+16>:	6308176	0	0	0
0x604130 <n21>:	8	0	6308272	0
0x604140 <n21+16>:	6308208	0	0	0
0x604150 <n22>:	50	0	6308240	0
0x604160 <n22+16>:	6308304	0	0	0
0x604170 <n32>:	22	0	6308496	0
0x604180 <n32+16>:	6308432	0	0	0
0x604190 <n33>:	45	0	6308336	0
0x6041a0 <n33+16>:	6308528	0	0	0
0x6041b0 <n31>:	6	0	6308368	0
0x6041c0 <n31+16>:	6308464	0	0	0
0x6041d0 <n34>:	107	0	6308400	0
0x6041e0 <n34+16>:	6308560	0	0	0
0x6041f0 <n45>:	40	0	0	0
0x604200 <n45+16>:	0	0	0	0
0x604210 <n41>:	1	0	0	0
0x604220 <n41+16>:	0	0	0	0
0x604230 <n47>:	99	0	0	0
0x604240 <n47+16>:	0	0	0	0
0x604250 <n44>:	35	0	0	0
0x604260 <n44+16>:	0	0	0	0
0x604270 <n42>:	7	0	0	0
0x604280 <n42+16>:	0	0	0	0
0x604290 <n43>:	20	0	0	0
0x6042a0 <n43+16>:	0	0	0	0
0x6042b0 <n46>:	47	0	0	0
0x6042c0 <n46+16>:	0	0	0	0
0x6042d0 <n48>:	1001	0	0	0
0x6042e0 <n48+16>:	0	0	0	0

           36
        /           \
      8               50
    /    \          /    \
   /      \        /      \
  6       22      45      107
 / \     /  \    /  \    /   \
1   7   20  35  40  47  99  1001


1001 <==secret_phase answer

